// Generated by CoffeeScript 1.8.0
var CocktailUi;

CocktailUi = (function() {
  var instance, parseResult;

  instance = null;

  CocktailUi.AREA_INDEX = "index";

  CocktailUi.AREA_CONFIGEDITOR = "configeditor";

  CocktailUi.AREA_CREATERECIPE = "createrecipe";

  CocktailUi.getInstance = function() {
    return instance != null ? instance : instance = new CocktailUi();
  };

  CocktailUi.prototype.showArea = function(areaName) {
    $("body").alterClass("area-*");
    return $("body").addClass("area-" + areaName);
  };

  function CocktailUi() {
    $("#config").prepend(this.getConfigVarInput("startAll", "http://", "if your machine has a service to stop all pumps with one call, you can add the url here", "Start all pumps url"));
    $("#config").prepend(this.getConfigVarInput("stopAll", "http://", "if your machine has a service to stop all pumps with one call, you can add the url here", "Stop all pumps url"));
    $("#config").prepend(this.getConfigVarInput("miliSecondsPerCl", "http://", "milliseconds per cl. <br>example: If your machine needs 2 seconds to fill up 1 CL you need to enter 2000 (ms) here. (only the number)", "MS per CL"));
    $("#config").prepend(this.getConfigVarInput("configname", "pumpsetup 1", "name of this setup", "Name"));
    $("#config").prepend(this.getConfigVarInput("uuid", "uuid", "just stuff"));
    FrontendHelper.getInstance();
  }

  CocktailUi.prototype.createNewConfig = function() {
    var cfg, loadAfitersave;
    cfg = CocktailUi.getInstance().getNewConfig();
    loadAfitersave = function() {
      var selectAfterload;
      selectAfterload = function() {
        return FrontendHelper.getInstance().selectConfigFroMenu(cfg.uuid);
      };
      return Service.getInstance().loadConfigs(selectAfterload);
    };
    return Service.getInstance().saveConfig(cfg, loadAfitersave);
  };

  CocktailUi.prototype.deleteButtonClick = function() {
    if ($("body").hasClass("area-configeditor")) {
      Service.getInstance().deleteCurrentConfig();
    }
    if ($("body").hasClass("area-createrecipe")) {
      return RecipeGenerator.getInstance().deleteCurrentRecipe();
    }
  };

  CocktailUi.prototype.saveButtonClick = function() {
    if ($("body").hasClass("area-configeditor")) {
      Service.getInstance().saveCurrentConfig();
    }
    if ($("body").hasClass("area-createrecipe")) {
      return RecipeGenerator.getInstance().saveCurrentRecipe();
    }
  };

  CocktailUi.prototype.duplicateButtonClick = function() {
    if ($("body").hasClass("area-configeditor")) {
      Service.getInstance().duplicateCurrentConfig();
    }
    if ($("body").hasClass("area-createrecipe")) {
      return RecipeGenerator.getInstance().duplicateCurrentRecipe();
    }
  };

  CocktailUi.prototype.clearConfig = function() {
    return CocktailUi.getInstance().loadConfig(CocktailUi.getInstance().getNewConfig());
  };

  CocktailUi.prototype.loadConfig = function(config) {
    var data, _i, _len, _ref, _results;
    this.config = config;
    CocktailUi.getInstance().showArea(CocktailUi.AREA_CONFIGEDITOR);
    $(".pumplist").html("");
    for (data in this.config) {
      this.setConfigValue(data, this.config[data]);
    }
    if (this.config.pumps != null) {
      _ref = this.config.pumps;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        data = _ref[_i];
        _results.push(this.addPump(data));
      }
      return _results;
    }
  };

  CocktailUi.prototype.setConfigValue = function(key, val) {
    return $("input[name=" + key + "]").val(val);
  };

  CocktailUi.prototype.getEmptyPumpConfig = function() {
    var uuid;
    uuid = CocktailUi.getInstance().getUniQueId("pump-");
    return {
      "uuid": uuid,
      "name": "unnamed Pump",
      "startUrl": "",
      "stopUrl": ""
    };
  };

  CocktailUi.prototype.getNewConfig = function() {
    var uuid;
    uuid = CocktailUi.getInstance().getUniQueId("config-");
    return {
      "uuid": uuid,
      "configname": "unnamed Config",
      "stopAll": "",
      "startAll": "",
      "miliSecondsPerCl": 0,
      "pumps": []
    };
  };

  CocktailUi.prototype.getUniQueId = function(prefix) {
    var ausg, s4;
    s4 = function() {
      return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
    };
    ausg = s4() + s4() + s4() + s4() + s4() + s4() + s4() + s4();
    return prefix + ausg;
  };

  CocktailUi.prototype.getConfigById = function(id) {
    return $("#" + id).data("config");
  };

  CocktailUi.prototype.getConfigFromForm = function() {
    var collectPumps, fillObject, key, obj, result, _i, _len, _ref;
    result = CocktailUi.getInstance().getConfigById($("form#config input[name=uuid]").val());
    fillObject = function(obj, result) {
      return result[obj.name] = obj.value;
    };
    _ref = $("form#config").serializeArray();
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      obj = _ref[_i];
      fillObject(obj, result);
    }
    result.pumps = [];
    collectPumps = function(key, result) {
      var isPump, pumpObj, uuid;
      isPump = key.substr(0, 5) === "pump-";
      if (isPump) {
        uuid = key.split("pump-").join("");
        uuid = uuid.split("]").join("");
        uuid = uuid.split("[");
        uuid = uuid[0];
        pumpObj = {
          uuid: "pump-" + uuid,
          startUrl: result["pump-" + uuid + "[startUrl]"],
          stopUrl: result["pump-" + uuid + "[stopUrl]"],
          name: result["pump-" + uuid + "[name]"]
        };
        result["pumps"].push(pumpObj);
        delete result["pump-" + uuid + "[startUrl]"];
        delete result["pump-" + uuid + "[stopUrl]"];
        return delete result["pump-" + uuid + "[name]"];
      }
    };
    for (key in result) {
      collectPumps(key, result);
    }
    result.pumps.reverse();
    return result;
  };

  parseResult = function(input) {
    var obj, _results;
    _results = [];
    for (obj in cfg) {
      _results.push(parseResult(obj));
    }
    return _results;
  };

  CocktailUi.prototype.getConfigVarInput = function(name, placeholder, description, label) {
    if (label == null) {
      label = name;
    }
    return $('<div class="form-group group-' + name + '">').append($("<label>").text(label).addClass("col-sm-2 control-label")).append($("<div>").addClass("col-sm-10").append($("<input>").attr("name", name).addClass("form-control").attr("type", "text").attr("placeholder", placeholder)).append($("<small>").addClass("col-sm-12 bg-info").html(description)));
  };

  CocktailUi.prototype.addConfigtoMenu = function(config) {
    var addRecipeTolist, key, link, pumps, recipeList, recipes, recipesCount, row;
    pumps = ConfigHelper.getInstance().getPumpCount(config);
    recipesCount = ConfigHelper.getInstance().getRecipesCount(config);
    recipes = ConfigHelper.getInstance().getRecipes(config);
    recipeList = $("<ul>").addClass("availableRecipes");
    addRecipeTolist = function(recipe, key, list) {
      var item;
      item = $("<li>").text(recipe.recipename).data(recipe).attr("id", key);
      item.prepend($("<div>").addClass("glyphicon glyphicon-glass"));
      return list.append(item);
    };
    for (key in recipes) {
      addRecipeTolist(recipes[key], key, recipeList);
    }
    link = $("<a>").text(config.configname || "No Name Given").append($("<small>").text("Liquids: " + pumps + " | Recipes: " + recipesCount));
    row = $("<li>").addClass("configuration").attr("id", config.uuid).append(link);
    if (recipesCount !== 0) {
      row.append(recipeList);
    }
    row.append($("<button>add Cocktail</button>").addClass("btn btn-xs addRecipe")).data("config", config);
    link.click((function(_this) {
      return function() {
        if (UnsavedHelper.getInstance().denieIfUnsaved(_this)) {
          return;
        }
        $(".configuration").removeClass("active");
        row.addClass("active");
        _this.clearConfig();
        return _this.loadConfig(config);
      };
    })(this));
    return $("#cocktailconfigs").append(row);
  };

  CocktailUi.prototype.addPump = function(pumpdata) {
    var item, selector, uuid;
    uuid = pumpdata.uuid;
    selector = $(".pumplist");
    item = $("<li>").addClass("well bg-info ").append($("<div>").html("&times;").addClass("removePump").click(function() {
      UnsavedHelper.getInstance().setUnsaved();
      return $(this).parent().remove();
    })).append($("<label>").text("Name")).append($("<input>").attr("name", "" + uuid + "[name]").addClass("form-control").val(pumpdata.name).attr("placeholder", "e.g. Pump1337 or Vodka")).append($("<label>").text("startUrl").addClass("indentedlabel")).append($("<input>").attr("name", "" + uuid + "[startUrl]").addClass("form-control indentedinput ").val(pumpdata.startUrl).attr("placeholder", "e.g. http://pump1337/start")).append($("<label>").text("stopUrl").addClass("indentedlabel")).append($("<input>").attr("name", "" + uuid + "[stopUrl]").addClass("form-control indentedinput").val(pumpdata.stopUrl).attr("placeholder", "e.g. http://pump1337/stop"));
    return selector.prepend(item);
  };

  CocktailUi.prototype.getPumpCount = function() {
    return this.config.pumps.length;
  };

  return CocktailUi;

})();
