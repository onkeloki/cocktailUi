// Generated by CoffeeScript 1.8.0
var RecipeGenerator;

RecipeGenerator = (function() {
  var instance;

  instance = null;

  RecipeGenerator.getInstance = function() {
    return instance != null ? instance : instance = new RecipeGenerator();
  };

  function RecipeGenerator() {
    $("body").on("click", "#ingredientlist li .ad-remove-button", function() {
      UnsavedHelper.getInstance().setUnsaved();
      return RecipeGenerator.getInstance().addIngredientToRecipe($(this).closest("li"));
    });
    $("body").on("click", "#theRecipe li .ad-remove-button", function() {
      +UnsavedHelper.getInstance().setUnsaved();
      return RecipeGenerator.getInstance().removeIngredientFromRecipe($(this).closest("li"));
    });
  }

  RecipeGenerator.prototype.addIngredientToRecipe = function(ingredient) {
    return $("#theRecipe").append(ingredient);
  };

  RecipeGenerator.prototype.removeIngredientFromRecipe = function(ingredient) {
    return $("#ingredientlist").append(ingredient);
  };

  RecipeGenerator.prototype.serializeRecipe = function() {
    var getUsedIngredient, item;
    getUsedIngredient = function(listitem) {
      return {
        uuid: $(listitem).data("uuid"),
        cl: $(listitem).find("select").val()
      };
    };
    return {
      uuid: $("form#recipe input[name='uuid']").val(),
      recipename: $("form#recipe  input[name='recipename']").val(),
      beforetext: $("form#recipe  input[name='beforetext']").val(),
      aftertext: $("form#recipe  input[name='aftertext']").val(),
      ingredientlist: (function() {
        var _i, _len, _ref, _results;
        _ref = $("#theRecipe li");
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          _results.push(getUsedIngredient(item));
        }
        return _results;
      })()
    };
  };

  RecipeGenerator.prototype.saveNewEmptyRecipeToConfig = function(config) {
    var loadConfigsAftersave, newEmptyRecipe;
    newEmptyRecipe = instance.getEmptyRecipe();
    instance.addRecipeToConfig(config, newEmptyRecipe);
    loadConfigsAftersave = function() {
      var selectRecipeAfterLoad;
      selectRecipeAfterLoad = function() {
        return $("#" + newEmptyRecipe.uuid).click();
      };
      return Service.getInstance().loadConfigs(selectRecipeAfterLoad);
    };
    return Service.getInstance().saveConfig(config, loadConfigsAftersave);
  };

  RecipeGenerator.prototype.duplicateCurrentRecipe = function() {
    var cfg, laodConfigsAftersave, rec;
    cfg = $("form#recipe").data("config");
    rec = RecipeGenerator.getInstance().serializeRecipe();
    rec.uuid = CocktailUi.getInstance().getUniQueId("recipe-");
    rec.recipename = "" + rec.recipename + " copy";
    RecipeGenerator.getInstance().addRecipeToConfig(cfg, rec);
    laodConfigsAftersave = function() {
      var selectRecipeAfterLoad;
      selectRecipeAfterLoad = function() {
        return $("#" + rec.uuid).click();
      };
      return Service.getInstance().loadConfigs(selectRecipeAfterLoad);
    };
    return Service.getInstance().saveConfig(cfg, laodConfigsAftersave);
  };

  RecipeGenerator.prototype.deleteCurrentRecipe = function() {
    var cfg, laodConfigsAftersave, rec;
    cfg = $("form#recipe").data("config");
    rec = RecipeGenerator.getInstance().serializeRecipe();
    delete cfg.recipes[rec.uuid];
    laodConfigsAftersave = function() {
      var gotoindex;
      gotoindex = function() {
        return CocktailUi.getInstance().showArea(CocktailUi.AREA_INDEX);
      };
      return Service.getInstance().loadConfigs(gotoindex);
    };
    return Service.getInstance().saveConfig(cfg, laodConfigsAftersave);
  };

  RecipeGenerator.prototype.saveCurrentRecipe = function() {
    var cfg, laodConfigsAftersave, rec;
    cfg = $("form#recipe").data("config");
    rec = RecipeGenerator.getInstance().serializeRecipe();
    RecipeGenerator.getInstance().addRecipeToConfig(cfg, rec);
    laodConfigsAftersave = function() {
      var selectRecipeAfterLoad;
      alert("Saved");
      selectRecipeAfterLoad = function() {
        return $("#" + rec.uuid).click();
      };
      return Service.getInstance().loadConfigs(selectRecipeAfterLoad);
    };
    return Service.getInstance().saveConfig(cfg, laodConfigsAftersave);
  };

  RecipeGenerator.prototype.addRecipeToConfig = function(cfg, rec) {
    if (cfg.recipes == null) {
      cfg["recipes"] = {};
    }
    return cfg.recipes[rec.uuid] = rec;
  };

  RecipeGenerator.prototype.loadRecipeGenerator = function(cfg, recipe) {
    var pump, _i, _len, _ref;
    CocktailUi.getInstance().showArea(CocktailUi.AREA_CREATERECIPE);
    $("form#recipe").data("config", cfg);
    $("#ingredientlist").html("");
    $("#setupname").text(cfg.configname);
    _ref = ConfigHelper.getInstance().getPumps(cfg);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pump = _ref[_i];
      instance.addIngredient(pump);
    }
    return instance.fillRecipeForm(recipe);
  };

  RecipeGenerator.prototype.fillRecipeForm = function(recipe) {
    var ingredient, restoreingredient, _i, _len, _ref, _results;
    $("#theRecipe").text("");
    $("form#recipe input[name=uuid]").val(recipe.uuid);
    $("form#recipe input[name=recipename]").val(recipe.recipename);
    $("form#recipe input[name=beforetext]").val(recipe.beforetext);
    $("form#recipe input[name=aftertext]").val(recipe.aftertext);
    $("#recipe-beforetext").val(recipe.beforetext);
    $("#recipe-aftertext").val(recipe.aftertext);
    restoreingredient = function(ingredient) {
      RecipeGenerator.getInstance().addIngredientToRecipe($("#ingredient-" + ingredient.uuid));
      return $("#ingredient-" + ingredient.uuid).find("select").val(ingredient.cl);
    };
    if (recipe.ingredientlist != null) {
      _ref = recipe.ingredientlist;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ingredient = _ref[_i];
        _results.push(restoreingredient(ingredient));
      }
      return _results;
    }
  };

  RecipeGenerator.prototype.addIngredient = function(pump) {
    var item, select;
    item = $("<li>").text(pump.name).data(pump).attr("id", "ingredient-" + pump.uuid);
    item.prepend($("<div>").addClass("ad-remove-button glyphicon glyphicon-search").text(""));
    select = RecipeGenerator.getInstance().getClSelect();
    item.prepend(select);
    return $("#ingredientlist").prepend(item);
  };

  RecipeGenerator.prototype.getClSelect = function() {
    var appendOption, ret, val, _i;
    ret = $("<select>");
    appendOption = function(value, to) {
      return to.append($("<option>").val(value).text("" + value + " cl"));
    };
    for (val = _i = 1; _i <= 50; val = ++_i) {
      appendOption(val, ret);
    }
    return ret;
  };

  RecipeGenerator.prototype.getEmptyRecipe = function() {
    var uuid;
    uuid = CocktailUi.getInstance().getUniQueId("recipe-");
    return {
      "uuid": uuid,
      recipename: "New Cocktail",
      "aftertext": "",
      "beforetext": "",
      "ingredientlist": []
    };
  };

  return RecipeGenerator;

})();
