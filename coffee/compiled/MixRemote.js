// Generated by CoffeeScript 1.8.0
var MixRemote;

MixRemote = (function() {
  var instance;

  function MixRemote() {}

  instance = null;


  /*loadedConfig = null */

  MixRemote.getInstance = function() {
    return instance != null ? instance : instance = new MixRemote();
  };

  MixRemote.prototype.loadConfigs = function(callback) {
    var loadObject;
    loadObject = {
      cache: false,
      url: "/service.php?mode=get",
      success: function(json) {
        var cfg, _i, _len, _results;
        $("#configurations").text("");
        _results = [];
        for (_i = 0, _len = json.length; _i < _len; _i++) {
          cfg = json[_i];
          _results.push(MixRemote.getInstance().addConfigtoMenu(JSON.parse(cfg)));
        }
        return _results;
      },
      dataType: "json"
    };
    return $.ajax(loadObject);
  };

  MixRemote.prototype.addConfigtoMenu = function(cfg) {
    var addRecipeTolist, i, key, onclickfunc, recipeList, recipes;
    i = $("<li>").html("<h1>" + cfg.configname + "</h1>").attr("id", cfg.uuid).addClass("configuration").data(cfg);
    recipeList = $("<ul>");
    addRecipeTolist = function(recipe, key, list) {
      var item;
      item = $("<li>").append($("<h4>").text(recipe.recipename).click(function() {
        return MixRemote.getInstance().showRecipe(key);
      })).data(recipe).attr("id", key);
      item.prepend($("<div>").addClass("glyphicon glyphicon-glass"));
      item.append(MixRemote.getInstance().getRecipeRunner(recipe, cfg));
      return list.append(item);
    };
    recipes = ConfigHelper.getInstance().getRecipes(cfg);
    for (key in recipes) {
      addRecipeTolist(recipes[key], key, recipeList);
    }
    i.append(recipeList);
    onclickfunc = function() {
      return MixRemote.getInstance().configSelect(cfg.uuid);
    };
    i.click(onclickfunc);
    return $("#configurations").append(i);
  };

  MixRemote.prototype.showRecipe = function(uuid) {
    $(".before").slideUp();
    $(".during").slideUp();
    $(".after").slideUp();
    $("#" + uuid + " .before").slideDown();
    return $("#" + uuid + " .during").slideDown();
  };

  MixRemote.prototype.configSelect = function(uuid) {
    $("body").addClass("selected");
    return $("#" + uuid).addClass("selected");
  };

  MixRemote.prototype.getMixture = function(pumps, ingredients) {
    var addRow, cliters, collectUsedPumIds, ingredient, list, p, usedPumpIds, _i, _j, _len, _len1;
    list = $("<ul>").addClass("mixture");
    usedPumpIds = [];
    cliters = {};
    if (ingredients == null) {
      return list;
    }
    collectUsedPumIds = function(ingredient, usedPumpIds, cliters) {
      usedPumpIds.push(ingredient.uuid);
      return cliters[ingredient.uuid] = ingredient.cl;
    };
    for (_i = 0, _len = ingredients.length; _i < _len; _i++) {
      ingredient = ingredients[_i];
      collectUsedPumIds(ingredient, usedPumpIds, cliters);
    }
    addRow = function(pump, list) {
      var isinarray;
      isinarray = $.inArray(pump.uuid, usedPumpIds) > -1;
      if (isinarray) {
        return list.append($("<li>").text("" + pump.name + " " + cliters[pump.uuid] + " cl").addClass(pump.uuid).data(pump).data("cl", cliters[pump.uuid]));
      }
    };
    for (_j = 0, _len1 = pumps.length; _j < _len1; _j++) {
      p = pumps[_j];
      addRow(p, list);
    }
    return list;
  };

  MixRemote.prototype.startBtnClick = function() {
    var item, miliSecondsPerCl, play, program;
    program = (function() {
      var _i, _len, _ref, _results;
      _ref = $(this).parent().find(".mixture li");
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push($(item).data());
      }
      return _results;
    }).call(this);
    miliSecondsPerCl = $(".configuration.selected").data("miliSecondsPerCl");
    play = function(prog, step) {
      var curr, currCl, currFillDuration, currName, currStartUrl, currStopUrl, currUUID;
      curr = prog[step];
      currName = prog[step].name;
      currUUID = prog[step].uuid;
      currCl = prog[step].cl;
      currFillDuration = currCl * miliSecondsPerCl;
      currStartUrl = prog[step].startUrl;
      currStopUrl = prog[step].stopUrl;

      /*console.log "fill #{currName} #{currCl} cl will need #{currFillDuration}ms" */
      return jQuery.ajax(currStartUrl, {
        complete: function() {
          var stopAndStartnext;
          $("." + currUUID).addClass("running");
          stopAndStartnext = (function(_this) {
            return function() {
              return jQuery.ajax(currStopUrl, {
                complete: function() {
                  $("[class^=pump-]").removeClass("running");
                  if (program[step + 1]) {
                    play(program, step + 1);
                  }
                }
              });
            };
          })(this);
          setTimeout(stopAndStartnext, currFillDuration);
        }
      });
    };
    return play(program, 0);
  };

  MixRemote.prototype.getRecipeRunner = function(rec, cfg) {
    var list;
    list = $("<ul>");
    list.append($("<li>").text(rec.beforetext).addClass("before"));
    list.append($("<li>").addClass("playerRow during").append(MixRemote.getInstance().getMixture(cfg.pumps, rec.ingredientlist)).prepend($("<button>").text("Start Mixing").addClass("btn").click(MixRemote.getInstance().startBtnClick)));
    list.append($("<li>").text(rec.aftertext).addClass("after"));
    return list;
  };

  return MixRemote;

})();
